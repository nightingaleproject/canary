name: Publish package to GHCR and deploy

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment'
        required: true
        default: production
        type: choice
        options:
          - production
          - development

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=edge,branch=master
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=raw,value=release,enable=${{ github.event_name == 'release' }}
            type=raw,value=release,enable=${{ github.event.inputs.tag-release == 'true' }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
  deploy-aca:
      runs-on: ubuntu-latest
      needs: build-and-push-image
      environment: ${{ inputs.target_environment || 'production'}}
      steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy container
        uses: azure/container-apps-deploy-action@v2
        with:
          imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:edge
          containerAppName: ${{ vars.ACA_NAME }}
          resourceGroup: ${{ vars.ACA_RESOURCE_GROUP }}
          containerAppEnvironment: ${{ vars.ACA_APP_ENVIRONMENT }}
          disableTelemetry: true
      - name: Update revision
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            az containerapp update \
            --name ${{ vars.ACA_NAME }} \
            --resource-group ${{ vars.ACA_RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:edge \
            --revision-suffix gha-${{ github.run_id }}-${{ github.run_attempt }}